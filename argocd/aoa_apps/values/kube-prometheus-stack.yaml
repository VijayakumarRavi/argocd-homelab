crds:
  enabled: true
cleanPrometheusOperatorObjectNames: true # unset this after first install
prometheus:
  route:
    main:
      enabled: false # you do this in gateway-api-objects
      hostnames:
      - prometheus-k8s.piccola.us # not sure AVP can do sub in values
      parentRefs:
      - group: gateway.networking.k8s.io
        kind: Gateway
        name: internal
        namespace: gateway
  prometheusSpec:
    replicas: 1
    enableFeatures:
      - auto-gomaxprocs
      - memory-snapshot-on-shutdown
      - new-service-discovery-manager
    retention: 7d
    retentionSize: 25GB
    scrapeInterval: 1m # Must match interval in Grafana Helm chart
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
    #       resources:
    #         requests:
    #           storage: 30Gi
    walCompression: true
    # ruleSelectorNilUsesHelmValues: false
    # scrapeConfigSelectorNilUsesHelmValues: false
    # serviceMonitorSelectorNilUsesHelmValues: false
    additionalScrapeConfigs:
      - job_name: opnsense
        static_configs:
        - targets: [10.0.3.1:9100]
      - job_name: argocd
        static_configs:
        - targets: [https://argocd-application-controller-metrics.piccola.us:443]

## bundles the install of grafana (we'll handle this outside of this chart)
grafana:
  enabled: false
  forceDeployDashboards: true
  sidecar:
    dashboards:
      annotations:
        grafana_folder: Kubernetes

## Deploys the windows-exporter and Windows-specific dashboards
windowsMonitoring:
  enabled: false

## Configuration for alertmanager
alertmanager:
  enabled: false

## Component scraping the kube api server
kubeApiServer:
  enabled: true

## Component scraping the kube controller manager
kubeControllerManager:
  enabled: false

## Component scraping the kubelet and kubelet-hosted cAdvisor
kubelet:
  enabled: true

## Component scraping etcd
kubeEtcd:
  enabled: false

## Flag to disable all the kubernetes component scrapers
kubernetesServiceMonitors:
  enabled: true

## Component scraping coreDns.
coreDns:
  enabled: true

## Component scraping kubeDns. Use either this or coreDns
kubeDns:
  enabled: false

## Component scraping kube scheduler
kubeScheduler:
  enabled: false

## Component scraping kube proxy
kubeProxy:
  enabled: false

## Component scraping kube state metrics
kubeStateMetrics:
  enabled: true

kube-state-metrics:
  metricLabelsAllowlist:
    - "persistentvolumeclaims=[*]"
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node

## Deploy node exporter as a daemonset to all nodes (we'll handle this outside of this chart)
nodeExporter:
  enabled: true

## Manages Prometheus and Alertmanager components
prometheusOperator:
  enabled: true

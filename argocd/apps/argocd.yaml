apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://argoproj.github.io/argo-helm
    chart: argo-cd
    targetRevision: 7.3.3
    helm:
      releaseName: argocd
      valuesObject:
        repoServer:
          rbac: # i think this lets argo get secrets which is needed fo when AVP_TYPE is kubernetessecret
            - apiGroups: [""]
              resources: ["secrets"]
              verbs: ["get", "watch", "list"]
          volumes:
            - configMap:
                name: cmp-plugin
              name: cmp-plugin
            - name: custom-tools
              emptyDir: {}
          initContainers:
            - name: download-tools
              image: registry.access.redhat.com/ubi8
              env:
                - name: AVP_VERSION
                  value: 1.16.1
              command: [sh, -c]
              args:
                - >-
                  curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64 -o argocd-vault-plugin &&
                  chmod +x argocd-vault-plugin &&
                  mv argocd-vault-plugin /custom-tools/
              volumeMounts:
                - mountPath: /custom-tools
                  name: custom-tools
          extraContainers:
            - name: avp
              command: [/var/run/argocd/argocd-cmp-server]
              image: registry.access.redhat.com/ubi8
              env:
                - name: AVP_TYPE
                  value: kubernetessecret
              securityContext:
                runAsNonRoot: true
                runAsUser: 999
              volumeMounts:
                - mountPath: /var/run/argocd
                  name: var-files
                - mountPath: /home/argocd/cmp-server/plugins
                  name: plugins
                - mountPath: /tmp
                  name: tmp

                # Register plugins into sidecar
                - mountPath: /home/argocd/cmp-server/config/plugin.yaml
                  subPath: avp.yaml
                  name: cmp-plugin

                # Important: Mount tools into $PATH
                - name: custom-tools
                  subPath: argocd-vault-plugin
                  mountPath: /usr/local/bin/argocd-vault-plugin
          extraObjects:
            - apiVersion: v1
              kind: ConfigMap
              metadata:
                name: cmp-plugin
              data:
                avp.yaml: |
                  apiVersion: argoproj.io/v1alpha1
                  kind: ConfigManagementPlugin
                  metadata:
                    name: argocd-vault-plugin
                    namespace: argocd
                  spec:
                    allowConcurrency: true
                    discover:
                      find:
                        command:
                          - sh
                          - "-c"
                          - "find . -name '*.yaml' | xargs -I {} grep \"<path\\|avp\\.kubernetes\\.io\" {} | grep ."
                    generate:
                      command:
                        - argocd-vault-plugin
                        - generate
                        - "."
                    lockRepo: false
  destination:
    name: in-cluster
    namespace: argocd
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false # https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync/#automatic-pruning-with-allow-empty-v18
    syncOptions:
      - CreateNamespace=true



# see https://github.com/argoproj/argo-cd/issues/10456 for details as to why this may be needed one day
# if it is needed value it in via valuesObject: configs.cm.resource.exclusions
# data:
#   resource.exclusions: |
#     - apiGroups:
#       - cilium.io
#       kinds:
#       - CiliumIdentity
#       clusters:
#       - "*"

# example of oob argocd/argocd-cm (configmap)
# data:
#   admin.enabled: "true"
#   application.instanceLabelKey: argocd.argoproj.io/instance
#   exec.enabled: "false"
#   server.rbac.log.enforce.enable: "false"
#   statusbadge.enabled: "false"
#   timeout.hard.reconciliation: 0s
#   timeout.reconciliation: 180s
#   url: https://argocd.example.com

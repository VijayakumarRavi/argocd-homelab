---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: rook-ceph-cluster
  namespace: rook-ceph
spec:
  interval: 5m
  chart:
    spec:
      chart: rook-ceph-cluster
      version: v1.12.8
      sourceRef:
        kind: HelmRepository
        name: rook-ceph
        namespace: flux-system
  values:

    cephClusterSpec:
      placement:
        mon:
          tolerations:
          - key: node-role.kubernetes.io/control-plane
            operator: Exists
        # all:
        #   nodeAffinity:
        #     requiredDuringSchedulingIgnoredDuringExecution:
        #       nodeSelectorTerms:
        #         - matchExpressions:
        #           - key: role
        #             operator: In
        #             values:
        #             - storage-node
        #   podAffinity:
        #   podAntiAffinity:
        #   topologySpreadConstraints:
        #   tolerations:
        #   - key: storage-node
        #     operator: Exists
        # The above placement information can also be specified for mon, osd, and mgr components
      mon:
        # Set the number of mons to be started. Generally recommended to be 3.
        # For highest availability, an odd number of mons should be specified.
        count: 3
      resources:
        mgr:
          requests:
            cpu: "125m"
            memory: "549M"
          # limits:
          #   memory: "1219M"
        mon:
          requests:
            cpu: "49m"
            memory: "477M"
          # limits:
          #   memory: "1059M"
        osd:
          requests:
            cpu: "442m"
            memory: "2000M"
          # limits:
          #   memory: "5944M"
        prepareosd:
          requests:
            cpu: "250m"
            memory: "50Mi"
          # limits:
          #   memory: "200Mi"
        mgr-sidecar:
          requests:
            cpu: "49m"
            memory: "94M"
          # limits:
          #   memory: "208M"
        crashcollector:
          requests:
            cpu: "15m"
            memory: "64M"
          limits:
            memory: "64M"
        logcollector:
          requests:
            cpu: "100m"
            memory: "100M"
          # limits:
          #   memory: "1G"
        cleanup:
          requests:
            cpu: "250m"
            memory: "100M"
          # limits:
          #   memory: "1G"

      # crashCollector:
      #   disable: false # <-- defaults to false

      dashboard:
        enabled: true
        urlPrefix: /
        # port: 80
        # ssl: false

      storage:
        useAllNodes: false
        useAllDevices: false
        config:
          osdsPerDevice: "1"
        nodes:
          - name: "control-1"
            devices:
              - name: "sdb"
          - name: "control-2"
            devices:
              - name: "sdb"
          - name: "control-3"
            devices:
              - name: "sdb"
          - name: "control-4"
            devices:
              - name: "sdb"
          - name: "control-5"
          #   devices:
          #     - name: "sdb"
          # - name: "worker-1"
          #   devices:
          #     - name: "sdb"
          # - name: "worker-2"
          #   devices:
          #     - name: "sdb"
          # - name: "worker-3"
          #   devices:
          #     - name: "sdb"


    ingress:
      # -- Enable an ingress for the ceph-dashboard
      dashboard:
        ingressClassName: "nginx-internal"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
        # If the dashboard has ssl: true the following will make sure the NGINX Ingress controller can expose the dashboard correctly
        #   nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        #   nginx.ingress.kubernetes.io/server-snippet: |
        #     proxy_ssl_verify off;
        host:
          name: &host "ceph.${NGINX_INGRESS_SECRET_DOMAIN}"
          path: "/"
        tls:
          - hosts:
            - *host
            secretName: testsecret-tls

    cephBlockPools:
      - name: ceph-blockpool
        spec:
          failureDomain: host
          replicated:
            size: 3
        storageClass:
          enabled: true
          name: ceph-block
          isDefault: true
          reclaimPolicy: Delete
          allowVolumeExpansion: true
          parameters:
            imageFormat: "2"
            imageFeatures: layering
            csi.storage.k8s.io/provisioner-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
            csi.storage.k8s.io/controller-expand-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph
            csi.storage.k8s.io/node-stage-secret-name: rook-csi-rbd-node
            csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
            csi.storage.k8s.io/fstype: ext4

    cephFileSystems:
      - name: ceph-filesystem
        spec:
          metadataPool:
            replicated:
              size: 3
          dataPools:
            - failureDomain: host
              replicated:
                size: 3
          metadataServer:
            activeCount: 1
            activeStandby: true
            resources:
              requests:
                cpu: "35m"
                memory: "64M"
              limits:
                memory: "144M"
        storageClass:
          enabled: true
          isDefault: false
          name: ceph-filesystem
          reclaimPolicy: Delete
          allowVolumeExpansion: true
          mountOptions: []
          parameters:
            csi.storage.k8s.io/provisioner-secret-name: rook-csi-cephfs-provisioner
            csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
            csi.storage.k8s.io/controller-expand-secret-name: rook-csi-cephfs-provisioner
            csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph
            csi.storage.k8s.io/node-stage-secret-name: rook-csi-cephfs-node
            csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
            csi.storage.k8s.io/fstype: ext4

    cephObjectStores:
      - name: ceph-objectstore
        # see https://github.com/rook/rook/blob/master/Documentation/CRDs/Object-Storage/ceph-object-store-crd.md#object-store-settings for available configuration
        spec:
          metadataPool:
            failureDomain: host
            replicated:
              size: 3
          dataPool:
            failureDomain: host
            erasureCoded:
              dataChunks: 2
              codingChunks: 1
          preservePoolsOnDelete: true
          gateway:
            port: 80
            resources:
              requests:
                cpu: 100m
                memory: 1Gi
              limits:
                memory: 2Gi
            # securePort: 443
            # sslCertificateRef:
            instances: 1
            priorityClassName: system-cluster-critical
        storageClass:
          enabled: true
          name: ceph-bucket
          reclaimPolicy: Delete
          # volumeBindingMode: "Immediate"
          # see https://github.com/rook/rook/blob/master/Documentation/ceph-object-bucket-claim.md#storageclass for available configuration
          parameters:
            # note: objectStoreNamespace and objectStoreName are configured by the chart
            region: us-east-1
        # ingress:
        #   # Enable an ingress for the ceph-objectstore
        #   enabled: false


    cephBlockPoolsVolumeSnapshotClass:
      enabled: true
      name: csi-rbdplugin-snapclass
      # annotations:
      #   k10.kasten.io/is-snapshot-class: "true"
      # parameters:
      #   clusterID: rook-ceph
      #   csi.storage.k8s.io/snapshotter-secret-name: rook-csi-rbd-provisioner
      #   csi.storage.k8s.io/snapshotter-secret-namespace: rook-ceph
      # deletionPolicy: Delete

    # configOverride: |
    #   [global]
    #   bdev_enable_discard = true
    #   bdev_async_discard = true

    toolbox:
      enabled: true

    # monitoring:
    #   enabled: true <-- defaults to false
    #   createPrometheusRules: true
